.. _create_filter_bank:

create_filter_bank
------------------

  def create_filter_bank(delta_f, flow, band, nchan, psd, spec_corr):
      lal_psd = psd.lal()
      lal_filters, np_filters = [],[]
      for i in range(nchan):
          lal_filter = lalburst.CreateExcessPowerFilter(flow + i*band, band, lal_psd, spec_corr)
          np_filters.append(Spectrum.from_lal(lal_filter))
          lal_filters.append(lal_filter)
      return filter_fseries, lal_filters, np_filters
Compute channel renormalization
-------------------------------

Compute the renormalization for the base filters up to a given bandwidth. ::

  def compute_channel_renomalization(nc_sum, lal_filters, spec_corr, nchans, verbose=True):
      mu_sq = (nc_sum+1)*numpy.array([lalburst.ExcessPowerFilterInnerProduct(f, f, spec_corr, None) for f in lal_filters])
      # Uncomment to get all possible frequency renormalizations
      #for n in xrange(nc_sum, nchans): # channel position index
      for n in xrange(nc_sum, nchans, nc_sum+1): # channel position index
          for k in xrange(0, nc_sum): # channel sum index
              # FIXME: We've precomputed this, so use it instead
              mu_sq[n] += 2*lalburst.ExcessPowerFilterInnerProduct(lal_filters[n-k], lal_filters[n-1-k], spec_corr, None)
      #print mu_sq[nc_sum::nc_sum+1]
      return mu_sq
.. _make_indp_tiles:

make_indp_tiles
---------------

In this function, we create a time frequency map with resolution similar than =tf_map= but rescale by a factor of =nc_sum= + 1. All tiles will be independent up to overlap from the original tiling. The =mu_sq= is applied to the resulting addition to normalize the outputs to be zero-mean unit-variance Gaussian variables (if the input is Gaussian). ::

  def make_indp_tiles(tf_map, nc_sum, mu_sq):
      tiles = tf_map.copy()
      # Here's the deal: we're going to keep only the valid output and
      # it's *always* going to exist in the lowest available indices
      stride = nc_sum + 1
      for i in xrange(tiles.shape[0]/stride):
          numpy.absolute(tiles[stride*i:stride*(i+1)].sum(axis=0), tiles[stride*(i+1)-1])
      return tiles[nc_sum::nc_sum+1].real**2 / mu_sq[nc_sum::nc_sum+1].reshape(-1, 1)
